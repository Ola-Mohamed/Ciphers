******************************************************************************
 ;* File Name: chipers.asm
 ;*
 ;* Description: Source file for chipers project for 8086 Intel Microcontroller.
 ;*               This code contains two types ofchipers 1-MonoNumeric 
 ;*                                                       
 ;*                                                      2-Monoalphaptic  
 ;*
 ;*
 ;* Author: Ola Mohamed -Rana Osama -Mariam Fathi - Doha Khaled - Yasmin Atyia
;******************************************************************************/

>>>>>>> main
name "crypt"
include 'emu8086.inc'
org 100h 
  

;-------------- Saving Tables --------------
; Storing letters from a to z (lower case)

MOV CX,26                      ; Size of letters in the alphabet
MOV AL,61h                     ; ASCII code for letter 'a'
MOV DI,400h                    ; Hold the offset of memory location in the ES
CLD                            ; clears the direction flag ( DF = 0 ,auto increament)

store_letters:
STOSB                          ; Copies a byte from AL to a memory location in ES. DI is used to hold the offset of the memory location in the ES.
                               ;After the copy, DI is automatically incremented or decremented to point to the next string element in memory.
INC AL                         ; Increases AL value by 1, therefore changing the letter
LOOP store_letters             ; Loops if CX after decrementing by 1 not equal 0


store_numbers:
STOSB                           ; Copies a byte from AL to a memory location in ES. DI is used to hold the offset of the memory location in the ES.
                                ;After the copy, DI is automatically incremented or decremented to point to the next number element in memory.
INC AL                           ; Increases AL value by 1, therefore changing the letter
LOOP store_numbers               ; Loops if CX after decrementing by 1 not equal 0
 
;--------------------------------------------------------------------------------------------------------------------------------------------

JMP start                      

;--------------------------------------------------------------------------------------------------------------------------------------------

encrypt_msg db 0Dh,0Ah,"Enter a message to encrypt: $"     

encrypted_msg db 0Dh,0Ah,"The encrypted message is: $"

decrypt_msg db 0Dh,0Ah,"The decrypted message is: $"

buffer db 27,?,27 dup(' ')   
            
;--------------------------------------------------------------------------------------------------------------------------------------------         

;                            'abcdefghijklmnopqrstvuwxyz'

table1      db 97 dup (' '), 'klmnxyzabcopqrstvuwdefghij'    ;store normal letters in table1 at size of 97 

table2      db 97 dup (' '), 'hijtuvwxyzabcdklmnoprqsefg'    ;store code letters in table2 at size of 97

msg1        DB  0Dh,0Ah,'Enter the message: ', '$'      

msg2        DB  'Encrypted message: ', '$'

msg3        DB  'Decrypted message: ', '$'

msg4        DB  'To Use Monoalphabetic Cipher Enter 1',0Dh,0Ah,'To Use Mononumeric Cipher Enter 2',0Dh,0Ah,'To End The Program Enter 3',0Dh,0Ah,'$'

msg5        DB  'Thank You For Your Time  ', '$'

n_line      DB  0DH,0AH,'$'                 ;for new line 

cho         DB  '$'                         ;for your choose

str         DB  256 DUP('$')                ;buffer string

enc_str     DB  256 DUP('$')                ;encrypted string

dec_str     DB  256 DUP('$')                ;decrypted string   

;--------------------------------------------------------------------------------------------------------------------------------------------
start:                                      ;start program

; print a choose message-output of a string at ds:dx
LEA   DX,msg4                               ;address msg4 with dx
MOV   AH,09h                                ; Selecting the sub-function
INT   21h                                   ; Function that outputs a string at DS:DX. String must be terminated by '$'


;read the string

PUSH   CS                                  ;push code segment from stack
POP    DS                                   ;pop data segment from stack
LEA    DI,cho                               ;address cho with di
MOV    DX,000FH                             ;exchange dx with 000FH
CALL   GET_STRING                           ;call get string function



LEA  DX ,n_line                       ;address n_line with dx
MOV  AH,09h                           ; Selecting the sub-function
INT   21h                             ; Function that outputs a string at DS:DX. String must be terminated by '$'
       
LEA    SI, cho                         ;address cho with si
CMP    [SI], '1'                       ;compare between "1" and effictive address of si
JE     monoalphapetic                  ;jump if [si]=1 to monoalphapetic  
CMP    [SI], '2'                       ;compare between "2" and effictive address of si        
JE     mononumeric                     ;jump if  [si]=2  to  mononumeric
CMP    [SI], '3'                       ;compare between "3" and effictive address of si
JE     exit                            ;jump if [si]=3 to exit
         
;--------------------------------------------------------------------------------------------------------------------------------------------

mononumeric:

LEA DX, encrypt_msg                     ; Displays "Enter a message to encrypt: " message
MOV AH,9                                ; Selecting the sub-function
INT 21h                                 ; Function that outputs a string at DS:DX. String must be terminated by '$'

; Takes input from user
LEA DX, buffer                          ;address buffer with dx
mov AH,0Ah                              ; Sub-function that stores input of a string to DS:DX
INT 21h                                 ; Function that outputs a string at DS:DX. String must be terminated by '$'

; Puts $ at the end to be able to print it later
MOV BX,0
MOV BL, buffer[1]
MOV buffer[BX+ 2],'$'

;-------------------------------------------------------- Encrypting ------------------------------------------


; Displays "Encrypted message: " message
LEA DX, encrypted_msg
MOV AH,9
INT 21h

; The encryption code
MOV DI,3FFh
MOV BX,DI
LEA SI, buffer[2]     

next_char:
CMP [SI],'$' ; Check if reached end of message
JE end_msg

LODSB ; Loads first char into AL, then moves SI to next char
CMP AL,'a'
JB next_char ; If char is invalid, skip it
CMP AL,'z'
JA next_char
XLATB ; Encrypt   

forspace:
MOV [SI-1],AL
MOV AH,0
CALL PRINT_NUM_UNS ; Using a procedure to print numbers
DEFINE_PRINT_NUM_UNS

JMP next_char
;space:  mov al,0h
; jmp forspace
end_msg:

<<<<<<< HEAD

>>>>>>> main
; ------------------------------------------Decryption--------------------------------------------------------
MOV BX,DI
LEA SI, buffer[2]

next_num:
CMP [SI],'$'
JE end_nums

LODSB ; Loads byte from DS:SI to AL, then increments SI by 1
CMP AL,1

JB next_num
CMP AL,26
JA next_num
XLATB ; Decrypt
MOV [SI-1],AL
JMP next_num



end_nums:
LEA DX, decrypt_msg
MOV AH,9
INT 21h
<<<<<<< HEAD
=======

; Displays decrypted message
LEA DX, buffer+2
MOV AH,9
INT 21h        

; print message-output of a string at ds:dx
LEA    dx,n_line
MOV    ah,09h
INT    21h 

; print message-output of a string at ds:dx
LEA    dx,n_line
MOV    ah,09h
INT    21h

CALL start              

;---------------------------------------------------------------Monoalphapetic Cipher---------------------------------------------------------------
monoalphapetic:

           
; print message-output of a string at ds:dx
LEA    dx,msg1           ;save the effective address in dx register
;to print the string in msg1 (of ds:dx)
MOV    ah,09h            
INT    21h       


; read the string
PUSH   CS
POP    DS
LEA    DI,str      ;DI register is to save offset address 
MOV    DX,00FFH    ;DX register is to save the size
CALL   GET_STRING  ;this function takes the user message and saves the string in size in DX  


; print message-output of a string at ds:dx
LEA    dx,n_line
MOV    ah,09h
INT    21h                
                               
; ---------------------------------------------------------------------Encryption--------------------------------------------------------------------------------------------
LEA    bx, table1
LEA    si, str
LEA    di, enc_str
CALL   parse   

                                          
; print message-output of a string at ds:dx
LEA    dx,msg2
MOV    ah,09h
INT    21h     
 
 
 ; show result-output of a string at ds:dx
LEA    dx, enc_str
MOV    ah, 09
INT    21h       


; print message-output of a string at ds:dx
LEA    dx,n_line
MOV    ah,09h
INT    21h     
     ;------------------------------------------------------------------------Decryption-------------------------------------------------------------------------------------
>>>>>>> main

LEA    bx, table2
LEA    si, enc_str
LEA    di, dec_str
CALL   parse 


; print message-output of a string at ds:dx
LEA    dx,msg3
MOV    ah,09h
INT    21h    


; show result-output of a string at ds:dx
LEA    dx, dec_str
MOV    ah, 09
INT    21h  

; print message-output of a string at ds:dx
LEA    dx,n_line
MOV    ah,09h
INT    21h
             

; print message-output of a string at ds:dx
LEA    dx,n_line
MOV    ah,09h
INT    21h 


CALL start

; subroutine to encrypt/decrypt
; parameters: 
;             si - address of string to encrypt
;             bx - table to use.


;           'abcdefghijklmnopqrstvuwxyz'

;table1:    'qwertyuiopasdfghjklzxcvbnm'

;table2:    'kbumcngphqrszyijadlewgbvft'  



parse proc near    
    

nextchar:
	cmp    [si], '$'      ; end of string?
	je     end_of_string
	cmp    [si], ' '
	je     skip
	
	mov    al, [si]
	cmp    al, 'a'
	jb     skip
	cmp    al, 'z'
	ja     skip	
	; xlat algorithm: al = ds:[bx + unsigned al] 
	xlatb     ; encrypt using table2.  
	MOV    [DI], AL
	INC    DI  
	
skip:
	INC    SI	
	JMP   nextchar
	

end_of_string:
    INC   SI
    MOV   [SI], '$'
   
ret     
parse endp         
           
exit:       

; print new line -  output of a string at ds:dx
LEA    dx,n_line
MOV    ah,09h
INT    21h  
