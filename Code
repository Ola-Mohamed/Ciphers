;******************************************************************************
 ;* File Name: chipers.asm
 ;*
 ;* Description: Source file for chipers project for 8086 Intel Microcontroller.
 ;*
 ;* This code contains two types of chipers :
 ;*                                          1- MonoNumeric 
 ;*                                          2-Monoalphaptic             
 ;*     
 ;* Author: Ola Mohamed -Rana Osama -Mariam Fathi - Doha Khaled - Yasmin Atyia
;******************************************************************************


name "crypt"
include 'emu8086.inc'
org 100h 
  

;-------------- Saving Tables --------------
; Storing letters from a to z (lower case)

MOV CX,26                      ; Size of letters in the alphabet
MOV AL,61h                     ; ASCII code for letter 'a'
MOV DI,400h                    ; Hold the offset of memory location in the ES
CLD                            ; clears the direction flag ( DF = 0 ,auto increament)

store_letters:
STOSB                          ; Copies a byte from AL to a memory location in ES. DI is used to hold the offset of the memory location in the ES.
                               ; After the copy, DI is automatically incremented or decremented to point to the next string element in memory.
INC AL                         ; Increases AL value by 1, therefore changing the letter
LOOP store_letters             ; Loops if CX after decrementing by 1 not equal 0

; Store numbers from 1 to 26

MOV CX,26                      ; Size of letters in the alphabet
MOV AL,1                       ; Starting from number 1
MOV DI,460h                    ; Hold the offset of memory location in the ES


store_numbers:
STOSB                           ; Copies a byte from AL to a memory location in ES. DI is used to hold the offset of the memory location in the ES.
                                ; After the copy, DI is automatically incremented or decremented to point to the next number element in memory.
INC AL                          ; Increases AL value by 1, therefore changing the letter
LOOP store_numbers              ; Loops if CX after decrementing by 1 not equal 0
 
;--------------------------------------------------------------------------------------------------------------------------------------------

JMP start                      

;--------------------------------------------------------------------------------------------------------------------------------------------

encrypt_msg db 0Dh,0Ah,"Enter a message to encrypt: $"     

encrypted_msg db 0Dh,0Ah,"The encrypted message is: $"

decrypt_msg db 0Dh,0Ah,"The decrypted message is: $"

buffer db 27,?,27 dup(' ')   
            
;--------------------------------------------------------------------------------------------------------------------------------------------         

;                            'abcdefghijklmnopqrstvuwxyz'

table1      db 97 dup (' '), 'klmnxyzabcopqrstvuwdefghij'                 ; store normal letters in table1 at size of 97 

table2      db 97 dup (' '), 'hijtuvwxyzabcdklmnoprqsefg'                 ; store code letters in table2 at size of 97

msg1        DB  0Dh,0Ah,'Enter the message: ', '$'                       ;store the enter message in msg1 

msg2        DB  'Encrypted message: ', '$'                               ;store the encrepted  message in msg2 

msg3        DB  'Decrypted message: ', '$'                               ;store the decrepted  message in msg3 


msg4        DB  'To Use Monoalphabetic Cipher Enter 1',0Dh,0Ah,'To Use Mononumeric Cipher Enter 2',0Dh,0Ah,'To End The Program Enter 3',0Dh,0Ah,'$'              ;store the starting message in msg4 


msg5        DB  'Thank You For Your Time  ', '$'                         ;store the thank message in msg5

n_line      DB  0DH,0AH,'$'                                              ; for new line 

cho         DB  '$'                                                      ; for your choose

str         DB  256 DUP('$')                                             ; buffer string

enc_str     DB  256 DUP('$')                                             ; encrypted string

dec_str     DB  256 DUP('$')                                             ; decrypted string   

;--------------------------------------------------------------------------------------------------------------------------------------------
start:                                      ; start program

; print a choose message-output of a string at ds:dx
LEA   DX,msg4                                                           ; address msg4 with dx
MOV   AH,09h                                                            ; Selecting the sub-function
INT   21h                                                               ; Function that outputs a string at DS:DX. String must be terminated by '$'


;read the string

PUSH   CS                                                               ; push code segment from stack
POP    DS                                                               ; pop data segment from stack
LEA    DI,cho                                                           ; address cho with di
MOV    DX,000FH                                                         ; exchange dx with 000FH
CALL   GET_STRING                                                       ; call get string function



LEA  DX ,n_line                                                         ; address n_line with dx
MOV  AH,09h                                                             ; Selecting the sub-function
INT   21h                                                               ; Function that outputs a string at DS:DX. String must be terminated by '$'
       
LEA    SI, cho                                                          ; address cho with si
CMP    [SI], '1'                                                        ; compare between "1" and effictive address of si
JE     monoalphapetic                                                   ; jump if [si]=1 to monoalphapetic  
CMP    [SI], '2'                                                        ; compare between "2" and effictive address of si        
JE     mononumeric                                                      ; jump if  [si]=2  to  mononumeric
CMP    [SI], '3'                                                        ; compare between "3" and effictive address of si
JE     exit                                                             ; jump if [si]=3 to exit
         
;--------------------------------------------------------------------------------------------------------------------------------------------

mononumeric:

LEA DX, encrypt_msg                                                    ; Displays "Enter a message to encrypt: " message
MOV AH,9                                                               ; Selecting the sub-function
INT 21h                                                                ; Function that outputs a string at DS:DX. String must be terminated by '$'

; Takes input from user
LEA DX, buffer                                                         ; address buffer with dx
mov AH,0Ah                                                             ; Sub-function that stores input of a string to DS:DX
INT 21h                                                                ; Function that outputs a string at DS:DX. String must be terminated by '$'

; Puts $ at the end to be able to print it later
MOV BX,0                                                                ;load the BX register with 0
MOV BL, buffer[1]                                                       ;moving the content of buffer[1] into register BL
MOV buffer[BX+ 2],'$'                                                   ; put '$' at the end of buffer to print it latter

;-------------------------------------------------------- Encrypting ------------------------------------------


; Displays "Encrypted message: " message
LEA DX, encrypted_msg                                                   ;mov the effictive addres of the encrypted_msg to the register DX
MOV AH,9                                                                ; moving (9) to the register AH
INT 21h                                                                 ; interrupt 21h is called to output the string 

; The encryption code
MOV DI,3FFh                                                             ; moving (3FFh) to the register DI
MOV BX,DI                                                               ;moving the content of register DI (33fh) into register bx
LEA SI, buffer[2]                                                       ;load the effictinve address of buffer[2] into register SI

NEXT_CHAR:
CMP [SI],'$'                                                            ; Check if reached end of message
JE end_msg                                                              ; if [SI] <'$'  will jmb to label end_msg

LODSB ; Loads first char into AL, then moves SI to next char
CMP AL,'a'                                                              ;compare content of AL minus 'a'
JB NEXT_CHAR                                                            ; If char is invalid, skip it
CMP AL,'z'                                                              ;compare the content of AL minus 'z'
JA NEXT_CHAR                                                            ;if AL > 'z' jmb to NEXT_CHAR ;; char is in valid
XLATB                                                                   ; Encrypt   converts the content of AL into the encrepted number stored in a memory table 

forspace:
MOV [SI-1],AL                                                           ;moving the content of AL into [SI-1] "the offset of the SI-1"
MOV AH,0                                                                ;load the AH register with 0
CALL PRINT_NUM_UNS                                                      ; Using a procedure to print unsigne numbers in AX
DEFINE_PRINT_NUM_UNS                                                    ;to declare the procedure  PRINT_NUM_UNS


JMP NEXT_CHAR
;space:  mov al,0h
; jmp forspace
end_msg:


; ------------------------------------------Decryption--------------------------------------------------------
MOV BX,DI                                                               ;moving the content of DI into register BX
LEA SI, buffer[2]                                                       ;load the effictive address of buffer[2] into  register SI


next_num:
CMP [SI],'$'                                                            ;compare  [SI]- '$'
JE end_nums                                                             ;if z=o jmp to the end_nums


LODSB                                                                   ; Loads byte from DS:SI to AL, then increments SI by 1
CMP AL,1 
JB next_num                                                             ;if content of AL is BELOW 1 jmp to next_num

CMP AL,26
JA next_num                                                             ;IF content of AL is above 26 jmb to next_num
XLATB                                                                   ; Decrypt 

MOV [SI-1],AL                                                           ;moving the contant  of AL register into [SI-1]
JMP next_num                     


end_nums:
LEA DX, decrypt_msg                                                     ;load the effictive address od  decrypt_msg to register DX
MOV AH,9                                                                ;moving (9) into register AH
INT 21h                                                                 ;interrupt 21H  is called to output a string


; Displays decrypted message
LEA DX, buffer+2
MOV AH,9
INT 21h        

; print message-output of a string at ds:dx
LEA    dx,n_line
MOV    ah,09h
INT    21h 

; print message-output of a string at ds:dx
LEA    dx,n_line
MOV    ah,09h
INT    21h

CALL start              

;---------------------------------------------------------------Monoalphapetic Cipher---------------------------------------------------------------


monoalphapetic:

           
;print a string that the DS:DX segment:offset pair point to 

LEA    dx,msg1                                                                 ; save the effective address of msg1 in DX register (offset of the string)
MOV    ah,09h                                                                  ; moving (09h) to the register ah to select sub-function 9 of the interrupt 21h DOS interrupts       
INT    21h                                                                     ; interrupt 21h is called to output the string  


;take the input from a user

PUSH   CS                                                                     ; pushes CS (code segment) into the stack
POP    DS                                                                     ; pops DS (data segment) out of the stack
LEA    DI,str                                                                 ; DI register is to save offset address 
MOV    DX,00FFH                                                               ; DX register is to save the buffer size

CALL   GET_STRING                                                             ; procedure to get string from a user
                                                                              ; the received string is written buffer at DS:DI , buffer size should be in DX
                                                                              ; procedure stops the input when 'Enter' is pressed 

;print new line

LEA    dx,n_line                                                              ; save the effective address of n_line in DX register (offset of the string)
MOV    ah,09h                                                                 ; moving (09h) to the register ah to select sub-function 9 of the interrupt 21h DOS interrupts
INT    21h                                                                    ; interrupt 21h is called   

                               
; ---------------------------------------------------------------------Encryption--------------------------------------------------------------------------------------------

LEA    bx, table1                                                             ; save the effective address of table1 in BX register
LEA    si, str                                                                ; save the effective address of str in SI register
LEA    di, enc_str                                                            ; save the effective address of enc_str in DI register

CALL   parse   

                                          
;print a string that the DS:DX segment:offset pair point to 

LEA    dx,msg2                                                               ; save the effective address of msg2 in DX register (offset of the string)
MOV    ah,09h                                                                ; moving (09h) to the register ah to select sub-function 9 of the interrupt 21h DOS interrupts
INT    21h                                                                   ; interrupt 21h is called to output the string 
 
 
;print a string that the DS:DX segment:offset pair point to 

LEA    dx, enc_str     ; save the effective address of enc_str in DX register (offset of the string)
MOV    ah, 09h         ; moving (09h) to the register ah to select sub-function 9 of the interrupt 21h DOS interrupts
INT    21h             ; interrupt 21h is called to output the string 


;print new line

LEA    dx,n_line       ; save the effective address of n_line in DX register (offset of the string)
MOV    ah,09h          ; moving (09h) to the register ah to select sub-function 9 of the interrupt 21h DOS interrupts
INT    21h             ; interrupt 21h is called

;------------------------------------------------------------------------Decryption-------------------------------------------------------------------------------------


LEA    bx, table2     ; save the effective address of table2 in BX register 
LEA    si, enc_str    ; save the effective address of enc_str in SI register 
LEA    di, dec_str    ; save the effective address of dec_str in DI register

CALL   parse 

;print a string that the DS:DX segment:offset pair point to

LEA    dx,msg3        ; save the effective address of msg3 in DX register (offset of the string)
MOV    ah,09h         ; moving (09h) to the register ah to select sub-function 9 of the interrupt 21h DOS interrupts
INT    21h            ; interrupt 21h is called to output the string 


;print a string that the DS:DX segment:offset pair point to

LEA    dx,dec_str    ; save the effective address of dec_str in DX register (offset of the string)
MOV    ah,09         ; moving (09h) to the register ah to select sub-function 9 of the interrupt 21h DOS interrupts
INT    21h           ; interrupt 21h is called to output the string

;print new line

LEA    dx,n_line       ; save the effective address of n_line in DX register (offset of the string)
MOV    ah,09h          ; moving (09h) to the register ah to select sub-function 9 of the interrupt 21h DOS interrupts
INT    21h             ; interrupt 21h is called
             

;print new line

LEA    dx,n_line       ; save the effective address of n_line in DX register (offset of the string)
MOV    ah,09h          ; moving (09h) to the register ah to select sub-function 9 of the interrupt 21h DOS interrupts
INT    21h             ; interrupt 21h is called


CALL start








;table2:    'kbumcngphqrszyijadlewgbvft'  



parse proc near    
    

NEXTCHAR:
CMP    [si], '$'      ; end of string?
JE    end_of_string
CMP    [si], ' '
JE     skip
	
MOV   al, [si]
CMP    al, 'a'
JB     skip
CMP    al, 'z'
JA     skip	
; XLAT algorithm : al = ds:[bx + unsigned al] 
XLATB                                                       ; encrypt using table2.  
MOV    [DI], AL
INC    DI  
	
skip:
	INC    SI	
	JMP   nextchar
	

end_of_string:
    INC   SI
    MOV   [SI], '$'
   
ret     
parse endp         
           
exit:       

; print new line -  output of a string at ds:dx
LEA    dx,n_line    ; save the effective address of new line in dx register  (offset address)
MOV    ah,09h       ; moving (09h) to the register ah to select sub-function 9 of the interrupt 21h DOS interrupts
INT    21h          ; interrupt 21h is called 

; print message (5)-output of a string at ds:dx
LEA    dx,msg5
MOV    ah,09h
INT    21h

DEFINE_GET_STRING     ; predefined macro in umu8086.inc to read a string input 

END
