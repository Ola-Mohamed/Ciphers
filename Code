******************************************************************************
 ;* File Name: chipers.asm
 ;*
 ;* Description: Source file for chipers project for 8086 Intel Microcontroller.
 ;*               This code contains two types ofchipers 1-MonoNumeric 
 ;*                                                       
 ;*                                                      2-Monoalphaptic  
 ;*
 ;*
 ;* Author: Ola Mohamed -Rana Osama -Mariam Fathi - Doha Khaled - Yasmin Atyia
;******************************************************************************/

name "crypt"

include 'emu8086.inc'

org 100h 
  

;-------------- Saving Tables --------------

; Storing letters from a to z (lower case)

MOV CX,26 ; Size of letters in the alphabet

MOV AL,61h ; ASCII code for letter 'a'

MOV DI,400h ; Hold the offset of memory location in the ES

CLD ; clears the direction flag ( DF = 0 )



store_letters:

STOSB ; Copies a byte from AL to a memory location in ES. DI is used to hold the offset of the memory location in the ES. After the copy, DI is automatically incremented or decremented to point to the next string element in memory.

INC AL ; Increases AL value by 1, therefore changing the letter

LOOP store_letters ; Loops if CX after decrementing by 1 not equal 0
store_numbers:

STOSB

INC AL

LOOP store_numbers  

;--------------------------------------------------------------------------------------------------------------------------------------------

jmp start

;--------------------------------------------------------------------------------------------------------------------------------------------

encrypt_msg db 0Dh,0Ah,"Enter a message to encrypt: $"

encrypted_msg db 0Dh,0Ah,"The encrypted message is: $"

decrypt_msg db 0Dh,0Ah,"The decrypted message is: $"

buffer db 27,?,27 dup(' ')   
            
;--------------------------------------------------------------------------------------------------------------------------------------------         

;                            'abcdefghijklmnopqrstvuwxyz'

table1      db 97 dup (' '), 'klmnxyzabcopqrstvuwdefghij'

table2      db 97 dup (' '), 'hijtuvwxyzabcdklmnoprqsefg'

msg1        DB  0Dh,0Ah,'Enter the message: ', '$'

msg2        DB  'Encrypted message: ', '$'

msg3        DB  'Decrypted message: ', '$'

msg4        DB  'To Use Monoalphabetic Cipher Enter 1',0Dh,0Ah,'To Use Mononumeric Cipher Enter 2',0Dh,0Ah,'To End The Program Enter 3',0Dh,0Ah,'$'

msg5        DB  'Thank You For Your Time  ', '$'

n_line      DB  0DH,0AH,'$'                 ;for new line 

cho         DB  '$'                

str         DB  256 DUP('$')                ;buffer string

enc_str     DB  256 DUP('$')                ;encrypted string

dec_str     DB  256 DUP('$')                ;decrypted string   

;--------------------------------------------------------------------------------------------------------------------------------------------



start:  


; print message-output of a string at ds:dx

LEA    dx,msg4 

MOV    ah,09h

INT    21h


; read the string

PUSH   CS

POP    DS

LEA    DI,cho

MOV    DX,000FH

CALL   GET_STRING  


; print message-output of a string at ds:dx

LEA    dx,n_line

MOV    ah,09h

INT    21h
       


LEA    si, cho


cmp    [si], '1'  
    
je     monoalphapetic 
 

cmp    [si], '2'          

je     mononumeric 


cmp    [si], '3'          

je     exit     
         

;--------------------------------------------------------------------------------------------------------------------------------------------

mononumeric:



; Displays "Enter a message to encrypt: " message

LEA DX, encrypt_msg

MOV AH,9

INT 21h



; Takes input from user

LEA DX, buffer

mov AH,0Ah ; Sub-function that stores input of a string to DS:DX

INT 21h



; Puts $ at the end to be able to print it later

MOV BX,0

MOV BL, buffer[1]

MOV buffer[BX+ 2],'$'


;-------------------------------------------------------- Encrypting ------------------------------------------


; Displays "Encrypted message: " message

LEA DX, encrypted_msg

MOV AH,9

INT 21h



; The encryption code

MOV DI,3FFh

MOV BX,DI

LEA SI, buffer[2]     




next_char:

CMP [SI],'$' ; Check if reached end of message

JE end_msg



LODSB ; Loads first char into AL, then moves SI to next char

CMP AL,'a'

JB next_char ; If char is invalid, skip it

CMP AL,'z'

JA next_char

XLATB ; Encrypt   




forspace:

MOV [SI-1],AL

MOV AH,0

CALL PRINT_NUM_UNS ; Using a procedure to print numbers

DEFINE_PRINT_NUM_UNS



JMP next_char



;space: mov al,0h

; jmp forspace


end_msg:
